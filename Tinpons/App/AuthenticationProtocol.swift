//
//  MainViewController.swift
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.16
//

import UIKit
import AWSMobileHubHelper
import AWSDynamoDB
import SwiftIconFont
import AWSMobileHubHelper

protocol ResetUIProtocol {
    var didAppear: Bool { get set }
    func resetUI()
}

protocol AuthenticationProtocol: class {
    var authenticationProtocolTabBarController: UITabBarController! { get set }
    var authenticationNavigationController: UINavigationController! { get set }
    func resetUI()
}

extension AuthenticationProtocol {
    func onSignIn (_ success: Bool) {
        // handle successful sign in
        if (success) {
//            let firstSignInStoryboard = UIStoryboard(name: "FirstSignIn", bundle: nil)
//            if let registrationViewController = firstSignInStoryboard.instantiateInitialViewController() {
//                print("jojojo")
//                self.authenticationNavigationController?.pushViewController(registrationViewController, animated: true)
//            }
            
//            createUserAccountIfNotExisting()

//            syncCoreDataWithDynamoDB(onCompletionClosure: { [weak self] in
//                guard let strongSelf = self else { return }
//                // reset every ViewController if User LogsIn
//                DispatchQueue.main.async {
//                    strongSelf.authenticationProtocolTabBarController.viewControllers?.forEach{ navigationController in
//                        if let viewController = navigationController.childViewControllers[0] as? ResetUIProtocol {
//                            viewController.resetUI()
//                        }
//                    }
//                }
//            })
        } else {
            // handle cancel operation from user
        }
    }

    func handleLogout() {
        if (AWSSignInManager.sharedInstance().isLoggedIn) {
            AWSSignInManager.sharedInstance().logout(completionHandler: {(result: Any?, authState: AWSIdentityManagerAuthState, error: Error?) in
                self.authenticationNavigationController.popToRootViewController(animated: false)
                self.presentSignInViewController()
            })
            
            // print("Logout Successful: \(signInProvider.getDisplayName)");
        } else {
            assert(false)
        }
    }
    
    func presentSignInViewController() {
        if !AWSSignInManager.sharedInstance().isLoggedIn {
            let loginStoryboard = UIStoryboard(name: "SignIn", bundle: nil)
            let loginController: SignInViewController = loginStoryboard.instantiateViewController(withIdentifier: "SignIn") as! SignInViewController
            loginController.canCancel = false
            loginController.didCompleteSignIn = onSignIn
            let navController = SignInNavigationController(rootViewController: loginController)
            authenticationNavigationController.present(navController, animated: true, completion: nil)
        }
    }
    
    func createUserAccountIfNotExisting() {
        let cognitoId = AWSIdentityManager.default().identityId
        //check if User Account exists
        let dynamoDBOBjectMapper = AWSDynamoDBObjectMapper.default()
        dynamoDBOBjectMapper.load(DynamoDBUser.self, hashKey: cognitoId, rangeKey: nil).continueWith(block: { (task:AWSTask<AnyObject>!) -> Any? in
            if let error = task.error {
                print("The request failed. Error: \(error)")
            } else if let _ = task.result as? User {
                //print("found something")
            } else if task.result == nil {
                // User does not exist => create
                let user = DynamoDBUser()
                user?.userId = cognitoId
                user?.createdAt = Date().iso8601.dateFromISO8601?.iso8601 // "2017-03-22T13:22:13.933Z"
                user?.tinponCategories = ["ðŸ‘•", "ðŸ‘–", "ðŸ‘ž"]
                user?.role = "User"
                dynamoDBOBjectMapper.save(user!).continueWith(block: { (task:AWSTask<AnyObject>!) -> Void in
                    if let error = task.error {
                        print("The request failed. Error: \(error)")
                    } else {
                        print("User created")
                        // Do something with task.result or perform other operations.
                    }
                })
            }
            return nil
        })
    }
    
    func syncCoreDataWithDynamoDB(onCompletionClosure onComplete: @escaping ()->() ) {
        SwipedTinponsCore.resetAllRecords()
        let cognitoId = AWSIdentityManager.default().identityId
        SwipedTinpon().loadAllSwipedTinponsFor(userId: cognitoId!, onComplete: { [weak self] swipedTinpons in
            guard let strongSelf = self else { return }
            for swipedTinpon in swipedTinpons {
                SwipedTinponsCore.save(swipedTinpon: swipedTinpon)
            }
            
            
            let swipedTinponsNew = SwipedTinponsCore.fetchData()
            print(" swiped New tinpons \(swipedTinponsNew?.count)")
            
            onComplete()
        })
        
    
    }
}
