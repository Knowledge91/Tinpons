//
//  Tinpons.swift
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.16
//

import Foundation
import UIKit
import AWSDynamoDB
import AWSS3
import AWSMobileHubHelper

class DynamoDBTinpon: AWSDynamoDBObjectModel, AWSDynamoDBModeling {
    
    var category: String?
    var createdAt: String?
    var imgUrl: String?
    var latitude: NSNumber?
    var longitude: NSNumber?
    var name: String?
    var price: NSNumber?
    var tinponId: String?
    var updatedAt: String?
    var userId: String?
    var active: NSNumber?
    
    class func dynamoDBTableName() -> String {
        return "tinpons-mobilehub-1827971537-Tinpons"
    }
    
    class func hashKeyAttribute() -> String {
        return "tinponId"
    }
    
    override class func jsonKeyPathsByPropertyKey() -> [AnyHashable: Any] {
        return [
            "category" : "category",
            "imgUrl" : "imgUrl",
            "latitude" : "latitude",
            "longitude" : "longitude",
            "name" : "name",
            "price" : "price",
            "tinponId" : "tinponId",
            "updatedAt" : "updatedAt",
            "userId" : "userId",
        ]
    }
    
    // MARK: Updates
    func removeFromFavourites() {
        let dynamoDBObjectMapper = AWSDynamoDBObjectMapper.default()
        
        // dont overwrite other attributes
        let updateMapperConfig = AWSDynamoDBObjectMapperConfiguration()
        updateMapperConfig.saveBehavior = .updateSkipNullAttributes
        
        let dynamoDBSwipedTinpon = DynamoDBSwipedTinpon()
        let cognitoId = AWSIdentityManager.default().identityId
        dynamoDBSwipedTinpon?.tinponId = tinponId
        dynamoDBSwipedTinpon?.userId = cognitoId
        dynamoDBSwipedTinpon?.favourite = NSNumber(value: 0)
        
        dynamoDBObjectMapper.save(dynamoDBSwipedTinpon!, configuration: updateMapperConfig).continueWith{ task in
            if let error = task.error {
                print("Could not update favourite: Error : \(error)")
            }
            return nil
        }
    }
    
    func deactivateTinpon() {
        // dont overwrite other attributes
        let updateMapperConfig = AWSDynamoDBObjectMapperConfiguration()
        updateMapperConfig.saveBehavior = .updateSkipNullAttributes
        
        let dynamoDBTinpon = DynamoDBTinpon()
        dynamoDBTinpon?.tinponId = tinponId
        dynamoDBTinpon?.active = NSNumber(value: 0)
        
        let dynamoDBObjectMapper = AWSDynamoDBObjectMapper.default()
        dynamoDBObjectMapper.save(dynamoDBTinpon!, configuration: updateMapperConfig).continueWith{ task in
            if let error = task.error {
                print("Could not deactivate Tinpon: Error : \(error)")
            }
            return nil
        }
    }
    
    func activateTinpon() {
        // dont overwrite other attributes
        let updateMapperConfig = AWSDynamoDBObjectMapperConfiguration()
        updateMapperConfig.saveBehavior = .updateSkipNullAttributes
        
        let dynamoDBTinpon = DynamoDBTinpon()
        dynamoDBTinpon?.tinponId = tinponId
        dynamoDBTinpon?.active = NSNumber(value: 1)
        
        let dynamoDBObjectMapper = AWSDynamoDBObjectMapper.default()
        dynamoDBObjectMapper.save(dynamoDBTinpon!, configuration: updateMapperConfig).continueWith{ task in
            if let error = task.error {
                print("Could not deactivate Tinpon: Error : \(error)")
            }
            return nil
        }
    }
    
    func save(imageToUpload image: UIImage, _ progressView: UIProgressView?, onCompletionClosure onComplete: @escaping () -> Void) {
        UserWrapper.getUserIdAWSTask().continueWith{ [weak self] task in
            guard let strongSelf = self else { return nil }
            strongSelf.userId = task.result! as String
            
            print(strongSelf)
            
            let dynamoDBObjectMapper = AWSDynamoDBObjectMapper.default()
            return dynamoDBObjectMapper.save(strongSelf)
            
        }.continueOnSuccessWith{[weak self] (task:AWSTask<AnyObject>!) -> Any? in
            guard let strongSelf = self else { print("nil"); return nil }
            
            // upload S3 image
            let imageData: NSData = UIImagePNGRepresentation(image)! as NSData
            let transferManager = AWSS3TransferManager.default()
            
            let fileManager = FileManager.default
            let path = (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0] as NSString).appendingPathComponent(strongSelf.tinponId!+".png")
            fileManager.createFile(atPath: path as String, contents: imageData as Data, attributes: nil)
            let fileUrl = NSURL(fileURLWithPath: path)
            
            let uploadRequest = AWSS3TransferManagerUploadRequest()
            
            uploadRequest?.bucket = "tinpons-userfiles-mobilehub-1827971537"
            uploadRequest?.key = strongSelf.tinponId
            uploadRequest?.body = fileUrl as URL!
            uploadRequest?.uploadProgress = { (bytesSent, totalBytesSent, totalBytesExpectedToSend) -> Void in
                DispatchQueue.main.async(execute: {
                    let sent = Float(totalBytesSent)
                    let total = Float(totalBytesExpectedToSend)
                    progressView?.progress = sent/total
                })
            }
            
            return transferManager.upload(uploadRequest!)
        }.continueWith(executor: AWSExecutor.mainThread(), block: { (task:AWSTask<AnyObject>) -> Any? in
            if let error = task.error as NSError? {
                if error.domain == AWSS3TransferManagerErrorDomain, let code = AWSS3TransferManagerErrorType(rawValue: error.code) {
                    switch code {
                    case .cancelled, .paused:
                        break
                    default:
                        print("Error uploading:  Error: \(error)")
                    }
                } else {
                    print("Error uploading:  Error: \(error)")
                }
                return nil
            }
            
            // S3 upload complete
            onComplete()
            return nil
        })
    }

}
